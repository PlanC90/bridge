const translations = {
  en: {
    title: "ЁЯМЙ MEMEX Bridge Form",
    fromNetworkLabel: "From Network",
    toNetworkLabel: "To Network",
    amountLabel: "MEMEX Amount",
    walletFromLabel: "Your Wallet Address (From)",
    walletToLabel: "Your Wallet Address (To)",
    txidFromLabel: "TX ID (From)",
    gasFeeLabel: "Gas Fee (BONE)",
    transactionHashLabel: "Gas Transaction Hash",
    noteXEP: "ЁЯУМ To bridge from XEP, send MEMEX to:",
    noteSHIBARIUM: "ЁЯУМ To bridge from SHIBARIUM, send MEMEX to:",
    warning: "тЪая╕П Transactions without sufficient gas will be burned.",
    info: "тП│ Transfers may take up to 24 hours to complete. We appreciate your patience.",
    submitButton: "Submit"
  },
  tr: {
    title: "ЁЯМЙ MEMEX K├╢pr├╝ Formu",
    fromNetworkLabel: "Kaynak A─Я",
    toNetworkLabel: "Hedef A─Я",
    amountLabel: "MEMEX Miktar─▒",
    walletFromLabel: "C├╝zdan Adresiniz (Kaynak)",
    walletToLabel: "C├╝zdan Adresiniz (Hedef)",
    txidFromLabel: "TX ID (Kaynak)",
    gasFeeLabel: "Gas ├Ьcreti (BONE)",
    transactionHashLabel: "Gas ─░┼Яlem Hash'i",
    noteXEP: "ЁЯУМ XEP'den k├╢pr├╝lemek i├зin, MEMEX'i ┼Яu adrese g├╢nderin:",
    noteSHIBARIUM: "ЁЯУМ SHIBARIUM'dan k├╢pr├╝lemek i├зin, MEMEX'i ┼Яu adrese g├╢nderin:",
    warning: "тЪая╕П Yetersiz gas i├зeren i┼Яlemler yak─▒lacakt─▒r.",
    info: "тП│ Transferlerin tamamlanmas─▒ 24 saate kadar s├╝rebilir. Sabr─▒n─▒z i├зin te┼Яekk├╝r ederiz.",
    submitButton: "G├╢nder"
  },
  es: {
    title: "ЁЯМЙ Formulario de Puente MEMEX",
    fromNetworkLabel: "Red de Origen",
    toNetworkLabel: "Red de Destino",
    amountLabel: "Cantidad de MEMEX",
    walletFromLabel: "Su Direcci├│n de Monedero (Origen)",
    walletToLabel: "Su Direcci├│n de Monedero (Destino)",
    txidFromLabel: "ID de TX (Origen)",
    gasFeeLabel: "Comisi├│n de Gas (BONE)",
    transactionHashLabel: "Hash de Transacci├│n de Gas",
    noteXEP: "ЁЯУМ Para puentear desde XEP, env├нe MEMEX a:",
    noteSHIBARIUM: "ЁЯУМ Para puentear desde SHIBARIUM, env├нe MEMEX a:",
    warning: "тЪая╕П Las transacciones sin suficiente gas se quemar├бn.",
    info: "тП│ Las transferencias pueden tardar hasta 24 horas en completarse. Agradecemos su paciencia.",
    submitButton: "Enviar"
  },
  hi: {
    title: "ЁЯМЙ MEMEX рдмреНрд░рд┐рдЬ рдлреЙрд░реНрдо",
    fromNetworkLabel: "рд╕реЗ рдиреЗрдЯрд╡рд░реНрдХ",
    toNetworkLabel: "рд╕реЗ рдиреЗрдЯрд╡рд░реНрдХ",
    amountLabel: "MEMEX рд░рд╛рд╢рд┐",
    walletFromLabel: "рдЖрдкрдХрд╛ рд╡реЙрд▓реЗрдЯ рдкрддрд╛ (рд╕реЗ)",
    walletToLabel: "рдЖрдкрдХрд╛ рд╡реЙрд▓реЗрдЯ рдкрддрд╛ (рд╕реЗ)",
    txidFromLabel: "TX ID (рд╕реЗ)",
    gasFeeLabel: "рдЧреИрд╕ рд╢реБрд▓реНрдХ (BONE)",
    transactionHashLabel: "рдЧреИрд╕ рд▓реЗрдирджреЗрди рд╣реИрд╢",
    noteXEP: "ЁЯУМ XEP рд╕реЗ рдмреНрд░рд┐рдЬ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, MEMEX рднреЗрдЬреЗрдВ:",
    noteSHIBARIUM: "ЁЯУМ SHIBARIUM рд╕реЗ рдмреНрд░рд┐рдЬ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, MEMEX рднреЗрдЬреЗрдВ:",
    warning: "тЪая╕П рдкрд░реНрдпрд╛рдкреНрдд рдЧреИрд╕ рдХреЗ рдмрд┐рдирд╛ рд▓реЗрдирджреЗрди рдЬрд▓рд╛ рджрд┐рдП рдЬрд╛рдПрдБрдЧреЗред",
    info: "тП│ рд╕реНрдерд╛рдирд╛рдиреНрддрд░рдг рдкреВрд░реНрдг рд╣реЛрдиреЗ рдореЗрдВ 24 рдШрдВрдЯреЗ рддрдХ рдХрд╛ рд╕рдордп рд▓рдЧ рд╕рдХрддрд╛ рд╣реИред рд╣рдо рдЖрдкрдХреЗ рдзреИрд░реНрдп рдХреЗ рд▓рд┐рдП рдЖрднрд╛рд░реА рд╣реИрдВред",
    submitButton: "рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ"
  },
  bn: {
    title: "ЁЯМЙ MEMEX ржмрзНрж░рж┐ржЬ ржлрж░рзНржо",
    fromNetworkLabel: "ржерзЗржХрзЗ ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ",
    toNetworkLabel: "ржерзЗржХрзЗ ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ",
    amountLabel: "MEMEX ржкрж░рж┐ржорж╛ржг",
    walletFromLabel: "ржЖржкржирж╛рж░ ржУржпрж╝рж╛рж▓рзЗржЯ ржарж┐ржХрж╛ржирж╛ (ржерзЗржХрзЗ)",
    walletToLabel: "ржЖржкржирж╛рж░ ржУржпрж╝рж╛рж▓рзЗржЯ ржарж┐ржХрж╛ржирж╛ (ржерзЗржХрзЗ)",
    txidFromLabel: "TX ID (ржерзЗржХрзЗ)",
    gasFeeLabel: "ржЧрзНржпрж╛рж╕ ржлрж┐ (BONE)",
    transactionHashLabel: "ржЧрзНржпрж╛рж╕ рж▓рзЗржиржжрзЗржи рж╣рзНржпрж╛рж╢",
    noteXEP: "ЁЯУМ XEP ржерзЗржХрзЗ ржмрзНрж░рж┐ржЬ ржХрж░рж╛рж░ ржЬржирзНржп, MEMEX ржкрж╛ржарж╛ржи:",
    noteSHIBARIUM: "ЁЯУМ SHIBARIUM ржерзЗржХрзЗ ржмрзНрж░рж┐ржЬ ржХрж░рж╛рж░ ржЬржирзНржп, MEMEX ржкрж╛ржарж╛ржи:",
    warning: "тЪая╕П ржпржерзЗрж╖рзНржЯ ржЧрзНржпрж╛рж╕ ржЫрж╛ржбрж╝рж╛ рж▓рзЗржиржжрзЗржи ржкрзБржбрж╝рзЗ ржпрж╛ржмрзЗред",
    info: "тП│ ржЯрзНрж░рж╛ржирзНрж╕ржлрж╛рж░ рж╕ржорзНржкрзВрж░рзНржг рж╣рждрзЗ рзирзк ржШржирзНржЯрж╛ ржкрж░рзНржпржирзНржд рж╕ржоржпрж╝ рж▓рж╛ржЧрждрзЗ ржкрж╛рж░рзЗред ржЖржкржирж╛рж░ ржзрзИрж░рзНржпрзЗрж░ ржЬржирзНржп ржЖржорж░рж╛ ржХрзГрждржЬрзНржЮред",
    submitButton: "ржЬржорж╛ ржжрж┐ржи"
  },
  ar: {
    title: "ЁЯМЙ ┘Ж┘Е┘И╪░╪м ╪м╪│╪▒ MEMEX",
    fromNetworkLabel: "╪з┘Д╪┤╪и┘Г╪й ┘Е┘Ж",
    toNetworkLabel: "╪з┘Д╪┤╪и┘Г╪й ╪е┘Д┘Й",
    amountLabel: "┘Г┘Е┘К╪й MEMEX",
    walletFromLabel: "╪╣┘Ж┘И╪з┘Ж ┘Е╪н┘Б╪╕╪к┘Г (┘Е┘Ж)",
    walletToLabel: "╪╣┘Ж┘И╪з┘Ж ┘Е╪н┘Б╪╕╪к┘Г (╪е┘Д┘Й)",
    txidFromLabel: "┘Е╪╣╪▒┘Б ╪з┘Д┘Е╪╣╪з┘Е┘Д╪й (┘Е┘Ж)",
    gasFeeLabel: "╪▒╪│┘И┘Е ╪з┘Д╪║╪з╪▓ (BONE)",
    transactionHashLabel: "┘З╪з╪┤ ┘Е╪╣╪з┘Е┘Д╪й ╪з┘Д╪║╪з╪▓",
    noteXEP: "ЁЯУМ ┘Д┘Д╪з┘Ж╪к┘В╪з┘Д ┘Е┘Ж XEP╪М ╪г╪▒╪│┘Д MEMEX ╪е┘Д┘Й:",
    noteSHIBARIUM: "ЁЯУМ ┘Д┘Д╪з┘Ж╪к┘В╪з┘Д ┘Е┘Ж SHIBARIUM╪М ╪г╪▒╪│┘Д MEMEX ╪е┘Д┘Й:",
    warning: "тЪая╕П ╪│┘К╪к┘Е ╪н╪▒┘В ╪з┘Д┘Е╪╣╪з┘Е┘Д╪з╪к ╪з┘Д╪к┘К ┘Д╪з ╪к╪н╪к┘И┘К ╪╣┘Д┘Й ╪║╪з╪▓ ┘Г╪з┘Б┘Н.",
    info: "тП│ ┘В╪п ╪к╪│╪к╪║╪▒┘В ╪╣┘Е┘Д┘К╪з╪к ╪з┘Д┘Ж┘В┘Д ┘Е╪з ┘К╪╡┘Д ╪е┘Д┘Й 24 ╪│╪з╪╣╪й ┘Д╪е┘Г┘Е╪з┘Д┘З╪з. ┘Ж╪┤┘Г╪▒ ┘Д┘Г┘Е ╪╡╪и╪▒┘Г┘Е.",
    submitButton: "╪е╪▒╪│╪з┘Д"
  },
  pt: {
    title: "ЁЯМЙ Formul├бrio da Ponte MEMEX",
    fromNetworkLabel: "Rede de Origem",
    toNetworkLabel: "Rede de Destino",
    amountLabel: "Quantidade de MEMEX",
    walletFromLabel: "Seu Endere├зo de Carteira (Origem)",
    walletToLabel: "Seu Endere├зo de Carteira (Destino)",
    txidFromLabel: "ID da TX (Origem)",
    gasFeeLabel: "Taxa de G├бs (BONE)",
    transactionHashLabel: "Hash da Transa├з├гo de Gas",
    noteXEP: "ЁЯУМ Para fazer a ponte de XEP, envie MEMEX para:",
    noteSHIBARIUM: "ЁЯУМ Para fazer a ponte de SHIBARIUM, envie MEMEX para:",
    warning: "тЪая╕П Transa├з├╡es sem g├бs suficiente ser├гo queimadas.",
    info: "тП│ As transfer├кncias podem levar at├й 24 horas para serem conclu├нdas. Agradecemos sua paci├кncia.",
    submitButton: "Enviar"
  },
  ru: {
    title: "ЁЯМЙ ╨д╨╛╤А╨╝╨░ ╨╝╨╛╤Б╤В╨░ MEMEX",
    fromNetworkLabel: "╨б╨╡╤В╤М ╨╛╤В╨┐╤А╨░╨▓╨╗╨╡╨╜╨╕╤П",
    toNetworkLabel: "╨б╨╡╤В╤М ╨┐╨╛╨╗╤Г╤З╨╡╨╜╨╕╤П",
    amountLabel: "╨Ъ╨╛╨╗╨╕╤З╨╡╤Б╤В╨▓╨╛ MEMEX",
    walletFromLabel: "╨Т╨░╤И ╨░╨┤╤А╨╡╤Б ╨║╨╛╤И╨╡╨╗╤М╨║╨░ (╨Ю╤В╨┐╤А╨░╨▓╨║╨░)",
    walletToLabel: "╨Т╨░╤И ╨░╨┤╤А╨╡╤Б ╨║╨╛╤И╨╡╨╗╤М╨║╨░ (╨Я╨╛╨╗╤Г╤З╨╡╨╜╨╕╨╡)",
    txidFromLabel: "ID ╤В╤А╨░╨╜╨╖╨░╨║╤Ж╨╕╨╕ (╨Ю╤В╨┐╤А╨░╨▓╨║╨░)",
    gasFeeLabel: "╨Я╨╗╨░╤В╨░ ╨╖╨░ ╨│╨░╨╖ (BONE)",
    transactionHashLabel: "╨е╤Н╤И ╤В╤А╨░╨╜╨╖╨░╨║╤Ж╨╕╨╕ ╨│╨░╨╖╨░",
    noteXEP: "ЁЯУМ ╨Ф╨╗╤П ╨┐╨╡╤А╨╡╤Е╨╛╨┤╨░ ╤Б XEP, ╨╛╤В╨┐╤А╨░╨▓╤М╤В╨╡ MEMEX ╨╜╨░:",
    noteSHIBARIUM: "ЁЯУМ ╨Ф╨╗╤П ╨┐╨╡╤А╨╡╤Е╨╛╨┤╨░ ╤Б SHIBARIUM, ╨╛╤В╨┐╤А╨░╨▓╤М╤В╨╡ MEMEX ╨╜╨░:",
    warning: "тЪая╕П ╨в╤А╨░╨╜╨╖╨░╨║╤Ж╨╕╨╕ ╨▒╨╡╨╖ ╨┤╨╛╤Б╤В╨░╤В╨╛╤З╨╜╨╛╨│╨╛ ╨│╨░╨╖╨░ ╨▒╤Г╨┤╤Г╤В ╤Б╨╛╨╢╨╢╨╡╨╜╤Л.",
    info: "тП│ ╨Я╨╡╤А╨╡╨▓╨╛╨┤╤Л ╨╝╨╛╨│╤Г╤В ╨╖╨░╨╜╤П╤В╤М ╨┤╨╛ 24 ╤З╨░╤Б╨╛╨▓. ╨С╨╗╨░╨│╨╛╨┤╨░╤А╨╕╨╝ ╨╖╨░ ╨▓╨░╤И╨╡ ╤В╨╡╤А╨┐╨╡╨╜╨╕╨╡.",
    submitButton: "╨Ю╤В╨┐╤А╨░╨▓╨╕╤В╤М"
  },
  ja: {
    title: "ЁЯМЙ MEMEXуГЦуГкуГГуВ╕уГХуВйуГ╝уГа",
    fromNetworkLabel: "щАБф┐бхЕГуГНуГГуГИуГпуГ╝уВп",
    toNetworkLabel: "хПЧф┐буГНуГГуГИуГпуГ╝уВп",
    amountLabel: "MEMEXщЗП",
    walletFromLabel: "уВжуВйуГмуГГуГИуВвуГЙуГмуВ╣я╝ИщАБф┐бхЕГя╝Й",
    walletToLabel: "уВжуВйуГмуГГуГИуВвуГЙуГмуВ╣я╝ИхПЧф┐бя╝Й",
    txidFromLabel: "TX IDя╝ИщАБф┐бхЕГя╝Й",
    gasFeeLabel: "уВмуВ╣цЦЩщЗСя╝ИBONEя╝Й",
    transactionHashLabel: "уВмуВ╣хПЦх╝ХуГПуГГуВ╖уГе",
    noteXEP: "ЁЯУМ XEPуБЛуВЙуГЦуГкуГГуВ╕уБЩуВЛуБлуБпуАБMEMEXуВТцмбуБоуВвуГЙуГмуВ╣уБлщАБф┐буБЧуБжуБПуБауБХуБДуАВ",
    noteSHIBARIUM: "ЁЯУМ SHIBARIUMуБЛуВЙуГЦуГкуГГуВ╕уБЩуВЛуБлуБпуАБMEMEXуВТцмбуБоуВвуГЙуГмуВ╣уБлщАБф┐буБЧуБжуБПуБауБХуБДуАВ",
    warning: "тЪая╕П хНБхИЖуБкуВмуВ╣уБМуБкуБДуГИуГйуГ│уВ╢уВпуВ╖уГзуГ│уБпчЗГчД╝уБХуВМуБ╛уБЩуАВ",
    info: "тП│ ш╗вщАБуБлуБпцЬАхдз24цЩВщЦУуБЛуБЛуВЛха┤хРИуБМуБВуВКуБ╛уБЩуАВуБФчРЖшзгуБоуБ╗уБйуВИуВНуБЧуБПуБКщбШуБДуБДуБЯуБЧуБ╛уБЩуАВ",
    submitButton: "щАБф┐б"
  },
  pa: {
    title: "ЁЯМЙ MEMEX римрйНри░ри┐риЬ рилри╛ри░рио",
    fromNetworkLabel: "риирйИриЯри╡ри░риХ ридрйЛриВ",
    toNetworkLabel: "риирйИриЯри╡ри░риХ риирйВрй░",
    amountLabel: "MEMEX риори╛ридри░ри╛",
    walletFromLabel: "ридрйБри╣ри╛рибри╛ ри╡ри╛ри▓ри┐риЯ риРрибри░рйИрй▒ри╕ (ридрйЛриВ)",
    walletToLabel: "ридрйБри╣ри╛рибри╛ ри╡ри╛ри▓ри┐риЯ риРрибри░рйИрй▒ри╕ (риирйВрй░)",
    txidFromLabel: "TX ID (ридрйЛриВ)",
    gasFeeLabel: "риЧрйИри╕ рилри╝рйАри╕ (BONE)",
    transactionHashLabel: "риЧрйИри╕ риЯрйНри░ри╛риВриЬрйИриХри╕ри╝рии ри╣рйИри╕ри╝",
    noteXEP: "ЁЯУМ XEP ридрйЛриВ римрйНри░ри┐риЬ риХри░рии ри▓риИ, MEMEX ринрйЗриЬрйЛ:",
    noteSHIBARIUM: "ЁЯУМ SHIBARIUM ридрйЛриВ римрйНри░ри┐риЬ риХри░рии ри▓риИ, MEMEX ринрйЗриЬрйЛ:",
    warning: "тЪая╕П риХри╛рилри╝рйА риЧрйИри╕ ридрйЛриВ римри┐риири╛риВ риЯрйНри░ри╛риВриЬрйИриХри╕ри╝рии ри╕ри╛рйЬ рижри┐рй▒ридрйЗ риЬри╛ригриЧрйЗред",
    info: "тП│ риЯрйНри░ри╛риВри╕рилри╝ри░ рикрйВри░ри╛ ри╣рйЛриг ри╡ри┐рй▒риЪ 24 риШрй░риЯрйЗ ридрй▒риХ рижри╛ ри╕риори╛риВ ри▓рй▒риЧ ри╕риХрижри╛ ри╣рйИред ридрйБри╣ри╛рибрйЗ ри╕римри░ ри▓риИ ризрй░риири╡ри╛рижред",
    submitButton: "ри╕римриори┐риЯ риХри░рйЛ"
  },
  de: {
    title: "ЁЯМЙ MEMEX-Br├╝ckenformular",
    fromNetworkLabel: "Von Netzwerk",
    toNetworkLabel: "Zu Netzwerk",
    amountLabel: "MEMEX-Menge",
    walletFromLabel: "Ihre Wallet-Adresse (Von)",
    walletToLabel: "Ihre Wallet-Adresse (Zu)",
    txidFromLabel: "TX-ID (Von)",
    gasFeeLabel: "Gasgeb├╝hr (BONE)",
    transactionHashLabel: "Gas-Transaktionshash",
    noteXEP: "ЁЯУМ Um von XEP zu ├╝berbr├╝cken, senden Sie MEMEX an:",
    noteSHIBARIUM: "ЁЯУМ Um von SHIBARIUM zu ├╝berbr├╝cken, senden Sie MEMEX an:",
    warning: "тЪая╕П Transaktionen ohne ausreichende Gasgeb├╝hr werden verbrannt.",
    info: "тП│ ├Ьberweisungen k├╢nnen bis zu 24 Stunden dauern. Vielen Dank f├╝r Ihre Geduld.",
    submitButton: "Senden"
  }
};

// HTTPS y├╢nlendirme
if (location.protocol !== 'https:') {
  location.replace(`https://${location.hostname}${location.pathname}`);
}

document.addEventListener('DOMContentLoaded', function() {
  const languageSelect = document.getElementById('language');
  const fromNetwork = document.getElementById('fromNetwork');
  const toNetwork = document.getElementById('toNetwork');
  const bridgeAddress = document.getElementById('bridgeAddress');
  const walletFromLabel = document.getElementById('walletFromLabel');
  const walletToLabel = document.getElementById('walletToLabel');
  const amountInput = document.getElementById('amount');
  const txidFromLabel = document.getElementById('txidFromLabel');
  const walletFromInput = document.getElementById('walletFrom');
  const walletToInput = document.getElementById('walletTo');

  const updateAddress = () => {
    if (fromNetwork.value === 'SHIBARIUM') {
      bridgeAddress.innerText = '0x28Cd7B477f4601dB0aBe289FF7B17EB5D1062C87';
    } else {
      bridgeAddress.innerText = 'xUvEMAqbXsf6xAbH6TimiKbzfDTGTCsH3i';
    }
  };

  const updateWalletLabels = () => {
    walletFromLabel.textContent = `Your ${fromNetwork.options[fromNetwork.selectedIndex].text} Wallet Address (From)`;
    walletToLabel.textContent = `Your ${toNetwork.options[toNetwork.selectedIndex].text} Wallet Address (To)`;
  };

  const updateTxidLabel = () => {
    const fromNetworkText = fromNetwork.options[fromNetwork.selectedIndex].text;
    txidFromLabel.textContent = `${fromNetworkText} TX ID (From)`;
  };

  const translateForm = () => {
    const lang = languageSelect.value;
    const trans = translations[lang] || translations.en;

    document.title = trans.title;
    document.getElementById('title').textContent = trans.title;
    document.getElementById('fromNetworkLabel').textContent = trans.fromNetworkLabel;
    document.getElementById('toNetworkLabel').textContent = trans.toNetworkLabel;
    document.getElementById('amountLabel').textContent = trans.amountLabel;
    document.getElementById('gasFeeLabel').textContent = trans.gasFeeLabel;
    document.getElementById('transactionHashLabel').textContent = trans.transactionHashLabel;

    if (fromNetwork.value === 'XEP') {
      document.getElementById('note').textContent = trans.noteXEP;
    } else {
      document.getElementById('note').textContent = trans.noteSHIBARIUM;
    }

    document.getElementById('warning').textContent = trans.warning;
    document.getElementById('info').textContent = trans.info;
    document.getElementById('submitButton').textContent = trans.submitButton;
  };

  // Sync networks
  fromNetwork.addEventListener('change', (e) => {
    const selectedValue = e.target.value;
    const otherValue = toNetwork.value;
    
    if (selectedValue === 'XEP') {
      toNetwork.value = 'SHIBARIUM';
    } else {
      toNetwork.value = 'XEP';
    }
    translateForm();
    updateAddress();
    updateWalletLabels();
    updateTxidLabel();
  });

  toNetwork.addEventListener('change', (e) => {
    const selectedValue = e.target.value;
    const otherValue = fromNetwork.value;
    
    if (selectedValue === 'XEP') {
      fromNetwork.value = 'SHIBARIUM';
    } else {
      fromNetwork.value = 'XEP';
    }
    translateForm();
    updateAddress();
    updateWalletLabels();
    updateTxidLabel();
  });

  languageSelect.addEventListener('change', translateForm);
  translateForm();
  updateAddress();
  updateWalletLabels();
  updateTxidLabel();

  // Amount formatting
  amountInput.addEventListener('input', function(e) {
    let value = e.target.value;
    value = value.replace(/,/g, '');
    e.target.value = value;
  });

  // Wallet address validation during input
  walletFromInput.addEventListener('input', function(e) {
    const value = e.target.value;
    if (fromNetwork.value === 'SHIBARIUM' && !value.startsWith('0x')) {
      walletFromInput.setCustomValidity('Shibarium Wallet Address must start with "0x".');
    } else if (fromNetwork.value === 'XEP' && !value.startsWith('x')) {
      walletFromInput.setCustomValidity('XEP Wallet Address must start with "x".');
    } else {
      walletFromInput.setCustomValidity('');
    }
    walletFromInput.reportValidity();
  });

  walletToInput.addEventListener('input', function(e) {
    const value = e.target.value;
    if (toNetwork.value === 'SHIBARIUM' && !value.startsWith('0x')) {
      walletToInput.setCustomValidity('Shibarium Wallet Address must start with "0x".');
    } else if (toNetwork.value === 'XEP' && !value.startsWith('x')) {
      walletToInput.setCustomValidity('XEP Wallet Address must start with "x".');
    } else {
      walletToInput.setCustomValidity('');
    }
    walletToInput.reportValidity();
  });
});

document.getElementById('copyAddress').addEventListener('click', () => {
  const addr = document.getElementById('bridgeAddress').innerText;
  navigator.clipboard.writeText(addr).then(() => {
    alert("Address copied!");
  });
});

document.getElementById('copyGasAddress').addEventListener('click', () => {
  const gasAddress = document.getElementById('gasAddress').innerText;
  navigator.clipboard.writeText(gasAddress).then(() => {
    alert("Gas address copied!");
  });
});

document.getElementById('bridgeForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  const form = e.target;
  const formData = new FormData(form);

  let amount = formData.get('amount');
  amount = amount.replace(/,/g, '');

  const fromNetwork = formData.get('fromNetwork');
  const toNetwork = formData.get('toNetwork');
  const walletFrom = formData.get('walletFrom');
  const walletTo = formData.get('walletTo');

  if (fromNetwork === toNetwork) {
    alert('From Network and To Network cannot be the same.');
    return;
  }

  // Wallet address validation
  if (fromNetwork === 'SHIBARIUM' && !walletFrom.startsWith('0x')) {
    alert('Shibarium Wallet Address must start with "0x".');
    return;
  }

  if (fromNetwork === 'XEP' && !walletFrom.startsWith('x')) {
    alert('XEP Wallet Address must start with "x".');
    return;
  }

  if (toNetwork === 'SHIBARIUM' && !walletTo.startsWith('0x')) {
    alert('Shibarium Wallet Address must start with "0x".');
    return;
  }

  if (toNetwork === 'XEP' && !walletTo.startsWith('x')) {
    alert('XEP Wallet Address must start with "x".');
    return;
  }

  const response = await fetch('save-bridge.php', {
    method: 'POST',
    body: formData
  });

  if (!response.ok) {
    console.error('HTTP error!', response.status);
    alert('An error occurred while submitting the form.');
    return;
  }

  const res = await response.json();
  if (res.success) {
    const s = res.summary;
    const list = document.getElementById('summaryList');
    list.innerHTML = `
      <li><strong>From:</strong> ${s.fromNetwork}</li>
      <li><strong>To:</strong> ${s.toNetwork}</li>
      <li><strong>Amount:</strong> ${s.amount}</li>
      <li><strong>Wallet From:</strong> ${s.walletFrom}</li>
      <li><strong>Wallet To:</strong> ${s.walletTo}</li>
      <li><strong>TX ID From:</strong> ${s.txidFrom}</li>
      <li><strong>Gas Fee:</strong> ${s.gasFee}</li>
      <li><strong>Transaction Hash:</strong> ${s.transactionHash}</li>
      <li><strong>Time:</strong> ${new Date(s.timestamp).toLocaleString()}</li>
    `;

    form.classList.add('hidden');
    document.getElementById('summaryBox').classList.remove('hidden');
  } else {
    alert(res.message || 'Failed to submit the form.');
  }
});
